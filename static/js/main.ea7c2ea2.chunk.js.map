{"version":3,"sources":["responsive/Device.js","components/SearchCity.js","components/SmallLabel.js","components/Text.js","components/ForecastHour.js","components/ResultFadeIn.js","components/BigLabel.js","components/MediumLabel.js","components/Result.js","components/NotFound.js","components/App.js","serviceWorker.js","index.js"],"names":["size","device","mobileS","mobileM","mobileL","tablet","laptop","laptopL","desktop","desktopL","SearchBar","styled","form","showResult","SearchInput","input","SearchIcon","span","SearchCity","submit","value","change","onSubmit","type","placeholder","onChange","icon","faSearch","SmallLabel","h4","color","weight","fontSize","align","firstToUpperCase","Text","ForecastWrapper","div","WeatherIcon","img","ForecastHour","props","temp","month","day","hour","iconUrl","src","ResultFadeIn","keyframes","BigLabel","h2","MediumLabel","h3","Results","LocationWrapper","CurrentWeatherWrapper","TemperatureWrapper","Temperature","WeatherDetailsWrapper","WeatherDetail","Forecast","Result","weather","city","country","date","main","description","sunset","sunrise","humidity","wind","highestTemp","lowestTemp","forecasts","forecast","map","item","key","dt","Math","floor","dt_txt","slice","weatherIcon","faBolt","faCloudRain","faCloudShowersHeavy","faSnowflake","faSun","faCloud","faSmog","NotFoundWrapper","NotfoundIcon","NotFoundText","NotFound","faFrown","AppTitle","h1","secondary","WeatherWrapper","App","state","weatherInfo","error","handleInputChange","e","setState","target","handleSearchCity","preventDefault","APIkey","process","Promise","all","fetch","then","res1","res2","ok","json","Error","statusText","data1","data2","currentDate","Date","getDay","getDate","getMonth","sys","toLocaleTimeString","name","temp_max","temp_min","clouds","speed","list","catch","console","log","this","style","textAlign","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ea7c2ea2.chunk.js","sourcesContent":["const size = {\n    mobileS: '320px',\n    mobileM: '375px',\n    mobileL: '525px',\n    tablet: '768px',\n    laptop: '1024px',\n    laptopL: '1440px',\n    desktop: '2560px',\n};\n\nconst device = {\n    mobileS: `(min-width: ${size.mobileS})`,\n    mobileM: `(min-width: ${size.mobileM})`,\n    mobileL: `(min-width: ${size.mobileL})`,\n    tablet: `(min-width: ${size.tablet})`,\n    laptop: `(min-width: ${size.laptop})`,\n    laptopL: `(min-width: ${size.laptopL})`,\n    desktop: `(min-width: ${size.desktop})`,\n    desktopL: `(min-width: ${size.desktop})`,\n};\n\nexport default device;\n","import React from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\nimport device from '../responsive/Device';\n\nconst SearchBar = styled.form`\n    top: ${({ showResult }) => (showResult ? '0%' : '30%')};\n    position: relative;\n    margin: 0 auto;\n    max-width: 500px;\n    transition: 0.8s 0.5s;\n    @media ${device.laptopL} {\n        max-width: 600px;\n    }\n    @media ${device.desktop} {\n        max-width: 700px;\n    }\n`;\n\nconst SearchInput = styled.input`\n    width: 100%;\n    border: none;\n    background-color: #ffffff;\n    font-size: 16px;\n    padding: 10px 15px 10px 40px;\n    color: #c5c5c5;\n    transition: 0.2s;\n    border-radius: 20px;\n    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\n    &:focus {\n        color: #191919;\n        box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);\n        outline: none;\n    }\n    @media ${device.tablet} {\n        font-size: 18px;\n    }\n    @media ${device.laptop} {\n        padding: 15px 20px 15px 45px;\n        border-radius: 30px;\n    }\n`;\n\nconst SearchIcon = styled.span`\n    display: block;\n    position: absolute;\n    top: 50%;\n    left: 22px;\n    transform: translate(-50%, -50%);\n    height: 14px;\n    width: 14px;\n    font-size: 14px;\n    color: #c5c5c5;\n    @media ${device.tablet} {\n        height: 15px;\n        width: 15px;\n        font-size: 15px;\n    }\n    @media ${device.laptop} {\n        height: 16px;\n        width: 16px;\n        font-size: 16px;\n    }\n`;\n\nconst SearchCity = ({ submit, value, change, showResult }) => {\n    return (\n        <>\n            <SearchBar showResult={showResult} onSubmit={submit}>\n                <SearchInput\n                    type=\"text\"\n                    value={value}\n                    placeholder=\"Search city ...\"\n                    onChange={change}\n                />\n                <SearchIcon>\n                    <FontAwesomeIcon icon={faSearch} />\n                </SearchIcon>\n            </SearchBar>\n        </>\n    );\n};\n\nSearchCity.propTypes = {\n    submit: PropTypes.func.isRequired,\n    value: PropTypes.string.isRequired,\n    change: PropTypes.func.isRequired,\n    showResult: PropTypes.bool.isRequired,\n};\n\nexport default SearchCity;\n","import styled from 'styled-components';\nimport device from '../responsive/Device';\n\nconst SmallLabel = styled.h4`\n  color: ${({ color }) => color || '#FFFFFF'};\n  display: block;\n  font-weight: ${({ weight }) => weight || '600'};\n  font-size: ${({ fontSize }) => fontSize || '15px'};\n  text-align: ${({ align }) => align || 'left'};\n  padding: 5px 0;\n  ${({ firstToUpperCase }) =>\n      firstToUpperCase &&\n      `\n  &:first-letter {\n    text-transform: uppercase;\n  }\n  `}\n  @media ${device.tablet} {\n    font-size: ${({ fontSize }) => fontSize || '20px'};\n  }\n  @media ${device.laptop} {\n    font-size: ${({ fontSize }) => fontSize || '23px'};\n  } \n  @media ${device.laptopL} {\n    font-size: ${({ fontSize }) => fontSize || '26px'};\n  }\n`;\n\nexport default SmallLabel;\n","import styled from 'styled-components';\nimport device from '../responsive/Device';\n\nconst Text = styled.span`\n  color: ${({ color }) => color || '#FFFFFF'};\n  display: block;\n  font-size: ${({ fontSize }) => fontSize || '12px'};\n  text-align: ${({ align }) => align || 'left'};\n\n  ${({ firstToUpperCase }) =>\n      firstToUpperCase &&\n      `\n  &:first-letter {\n    text-transform: uppercase;\n  }\n  `}\n  @media ${device.tablet} {\n    font-size: ${({ fontSize }) => fontSize || '15px'};\n  }\n  @media ${device.laptop} {\n    font-size: ${({ fontSize }) => fontSize || '17px'};\n  } \n  @media ${device.laptopL} {\n    font-size: ${({ fontSize }) => fontSize || '19px'};\n  }\n`;\n\nexport default Text;\n","import React from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\nimport SmallLabel from './SmallLabel';\nimport Text from './Text';\nimport device from '../responsive/Device';\n\nconst ForecastWrapper = styled.div`\n    flex-shrink: 0;\n    flex-basis: 90px;\n    padding: 10px;\n    margin: 0 5px;\n    border-radius: 5px;\n    background-color: rgba(255, 255, 255, 0.2);\n    &:first-child {\n        margin-left: 0;\n    }\n    &:last-child {\n        margin-right: 0;\n    }\n    @media ${device.tablet} {\n        flex-basis: 110px;\n    }\n    @media ${device.laptop} {\n        flex-basis: 125px;\n    }\n    @media ${device.laptopL} {\n        flex-basis: 140px;\n    }\n`;\n\nconst WeatherIcon = styled.img`\n    display: block;\n    height: 50px;\n    width: 50px;\n    margin: 0 auto;\n`;\n\nconst ForecastHour = props => {\n    const { temp, month, day, hour, icon } = props;\n    const iconUrl = `https://openweathermap.org/img/w/${icon}.png`;\n\n    return (\n        <ForecastWrapper>\n            <Text align=\"center\">\n                {month}.{day}\n            </Text>\n            <Text align=\"center\">{hour}:00</Text>\n            <WeatherIcon src={iconUrl} />\n            <SmallLabel align=\"center\" weight=\"400\">\n                {temp}&#176;\n            </SmallLabel>\n        </ForecastWrapper>\n    );\n};\n\nForecastHour.propTypes = {\n    temp: PropTypes.number.isRequired,\n    month: PropTypes.string.isRequired,\n    day: PropTypes.string.isRequired,\n    hour: PropTypes.number.isRequired,\n    icon: PropTypes.string.isRequired,\n};\n\nexport default ForecastHour;\n","import { keyframes } from 'styled-components';\n\nconst ResultFadeIn = keyframes`\n  to {\n    opacity: 1;\n        visibility: visible;\n        top: 0;\n  }\n`;\n\nexport default ResultFadeIn;\n","import styled from 'styled-components';\nimport device from '../responsive/Device';\n\nconst BigLabel = styled.h2`\n  color: ${({ color }) => color || '#FFFFFF'};\n  display: block;\n  font-weight: ${({ weight }) => weight || '600'};\n  font-size: ${({ fontSize }) => fontSize || '30px'};\n  text-align: ${({ align }) => align || 'left'};\n  padding: 5px 0;\n  ${({ firstToUpperCase }) =>\n      firstToUpperCase &&\n      `\n  &:first-letter {\n    text-transform: uppercase;\n  }\n  `}\n  @media ${device.tablet} {\n    font-size: ${({ fontSize }) => fontSize || '37px'};\n  }\n  @media ${device.laptop} {\n    font-size: ${({ fontSize }) => fontSize || '43px'};\n  } \n  @media ${device.laptopL} {\n    font-size: ${({ fontSize }) => fontSize || '52px'};\n  } \n`;\n\nexport default BigLabel;\n","import styled from 'styled-components';\nimport device from '../responsive/Device';\n\nconst MediumLabel = styled.h3`\n  color: ${({ color }) => color || '#FFFFFF'};\n  display: block;\n  font-weight: ${({ weight }) => weight || '600'};\n  font-size: ${({ fontSize }) => fontSize || '20px'};\n  text-align: ${({ align }) => align || 'left'};\n  padding: 5px 0;\n  ${({ firstToUpperCase }) =>\n      firstToUpperCase &&\n      `\n  &:first-letter {\n    text-transform: uppercase;\n  }\n  `}\n  @media ${device.tablet} {\n    font-size: ${({ fontSize }) => fontSize || '23px'};\n  }\n  @media ${device.laptop} {\n    font-size: ${({ fontSize }) => fontSize || '26px'};\n  } \n  @media ${device.laptopL} {\n    font-size: ${({ fontSize }) => fontSize || '29px'};\n  }\n`;\n\nexport default MediumLabel;\n","/* eslint-disable react/forbid-prop-types */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n    faCloud,\n    faBolt,\n    faCloudRain,\n    faCloudShowersHeavy,\n    faSnowflake,\n    faSun,\n    faSmog,\n} from '@fortawesome/free-solid-svg-icons';\nimport styled from 'styled-components';\nimport device from '../responsive/Device';\nimport ForecastHour from './ForecastHour';\nimport ResultFadeIn from './ResultFadeIn';\nimport BigLabel from './BigLabel';\nimport MediumLabel from './MediumLabel';\nimport SmallLabel from './SmallLabel';\nimport Text from './Text';\n\nconst Results = styled.div`\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: space-between;\n    padding: 40px 0;\n    opacity: 0;\n    visibility: hidden;\n    position: relative;\n    top: 20px;\n    animation: ${ResultFadeIn} 0.5s 1.4s forwards;\n`;\n\nconst LocationWrapper = styled.div`\n    flex-basis: 100%;\n`;\n\nconst CurrentWeatherWrapper = styled.div`\n    flex-basis: 100%;\n    display: grid;\n    justify-content: center;\n    align-items: center;\n    grid-template-columns: auto 1fr;\n    margin: 20px 0;\n    grid-gap: 30px;\n    @media ${device.mobileL} {\n        flex-basis: 50%;\n        padding-right: 10px;\n    }\n    @media ${device.tablet} {\n        grid-template-columns: 1fr 1fr;\n        padding-right: 20px;\n    }\n`;\n\nconst WeatherIcon = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font-size: 70px;\n    color: #ffffff;\n    @media ${device.tablet} {\n        font-size: 100px;\n        justify-content: flex-end;\n    }\n    @media ${device.laptop} {\n        font-size: 120px;\n    }\n    @media ${device.laptopL} {\n        font-size: 140px;\n    }\n`;\n\nconst TemperatureWrapper = styled.div``;\n\nconst Temperature = styled.h3`\n    display: block;\n    font-size: 50px;\n    font-weight: 400;\n    color: #ffffff;\n    @media ${device.tablet} {\n        font-size: 70px;\n    }\n    @media ${device.laptop} {\n        font-size: 90px;\n    }\n    @media ${device.laptopL} {\n        font-size: 110px;\n    }\n`;\n\nconst WeatherDetailsWrapper = styled.div`\n    flex-basis: 100%;\n    display: flex;\n    flex-wrap: wrap;\n    padding: 10px 0;\n    margin: 20px 0;\n    background-color: rgba(255, 255, 255, 0.2);\n    border-radius: 10px;\n    align-self: flex-start;\n    @media ${device.mobileL} {\n        flex-basis: 50%;\n    }\n`;\n\nconst WeatherDetail = styled.div`\n    flex-basis: calc(100% / 3);\n    padding: 10px;\n    @media ${device.laptop} {\n        padding: 20px 10px;\n    }\n`;\n\nconst ForecastWrapper = styled.div`\n    flex-basis: 100%;\n    margin: 20px 0;\n    overflow: hidden;\n`;\n\nconst Forecast = styled.div`\n    position: relative;\n    display: flex;\n    overflow-x: scroll;\n    overflow-y: hidden;\n    scrollbar-color: lightgray #ffffff;\n    scrollbar-width: thin;\n    margin-top: 20px;\n    padding-bottom: 20px;\n    @media ${device.laptop} {\n        order: 4;\n    }\n`;\n\nconst Result = ({ weather }) => {\n    const {\n        city,\n        country,\n        date,\n        description,\n        main,\n        temp,\n        sunset,\n        sunrise,\n        humidity,\n        wind,\n        highestTemp,\n        lowestTemp,\n        forecast,\n    } = weather;\n\n    const forecasts = forecast.map(item => (\n        <ForecastHour\n            key={item.dt}\n            temp={Math.floor(item.main.temp * 1) / 1}\n            icon={item.weather[0].icon}\n            month={item.dt_txt.slice(5, 7)}\n            day={item.dt_txt.slice(8, 10)}\n            hour={item.dt_txt.slice(11, 13) * 1}\n        />\n    ));\n\n    let weatherIcon = null;\n\n    if (main === 'Thunderstorm') {\n        weatherIcon = <FontAwesomeIcon icon={faBolt} />;\n    } else if (main === 'Drizzle') {\n        weatherIcon = <FontAwesomeIcon icon={faCloudRain} />;\n    } else if (main === 'Rain') {\n        weatherIcon = <FontAwesomeIcon icon={faCloudShowersHeavy} />;\n    } else if (main === 'Snow') {\n        weatherIcon = <FontAwesomeIcon icon={faSnowflake} />;\n    } else if (main === 'Clear') {\n        weatherIcon = <FontAwesomeIcon icon={faSun} />;\n    } else if (main === 'Clouds') {\n        weatherIcon = <FontAwesomeIcon icon={faCloud} />;\n    } else {\n        weatherIcon = <FontAwesomeIcon icon={faSmog} />;\n    }\n\n    return (\n        <Results>\n            <LocationWrapper>\n                <BigLabel>\n                    {city}, {country}\n                </BigLabel>\n                <SmallLabel weight=\"400\">{date}</SmallLabel>\n            </LocationWrapper>\n            <CurrentWeatherWrapper>\n                <WeatherIcon>{weatherIcon}</WeatherIcon>\n                <TemperatureWrapper>\n                    <Temperature>{Math.floor(temp)}&#176;</Temperature>\n                    {/* <SmallLabel weight=\"400\" firstToUpperCase>\n                        {description}\n                    </SmallLabel> */}\n                </TemperatureWrapper>\n            </CurrentWeatherWrapper>\n            <WeatherDetailsWrapper>\n                <WeatherDetail>\n                    <SmallLabel align=\"center\" weight=\"400\">\n                        {Math.floor(highestTemp)}&#176;\n                    </SmallLabel>\n                    <Text align=\"center\">Nhiệt độ cao</Text>\n                </WeatherDetail>\n                <WeatherDetail>\n                    <SmallLabel align=\"center\" weight=\"400\">\n                        {wind}mph\n                    </SmallLabel>\n                    <Text align=\"center\">Gió</Text>\n                </WeatherDetail>\n                <WeatherDetail>\n                    <SmallLabel align=\"center\" weight=\"400\">\n                        {sunrise}\n                    </SmallLabel>\n                    <Text align=\"center\">Mặt trời mọc</Text>\n                </WeatherDetail>\n                <WeatherDetail>\n                    <SmallLabel align=\"center\" weight=\"400\">\n                        {Math.floor(lowestTemp)}&#176;\n                    </SmallLabel>\n                    <Text align=\"center\">Nhiệt độ thấp</Text>\n                </WeatherDetail>\n                <WeatherDetail>\n                    <SmallLabel align=\"center\" weight=\"400\">\n                        {humidity}%\n                    </SmallLabel>\n                    <Text align=\"center\">Mưa</Text>\n                </WeatherDetail>\n                <WeatherDetail>\n                    <SmallLabel align=\"center\" weight=\"400\">\n                        {sunset}\n                    </SmallLabel>\n                    <Text align=\"center\">Mặt trời lặn</Text>\n                </WeatherDetail>\n            </WeatherDetailsWrapper>\n            <ForecastWrapper>\n                <MediumLabel weight=\"400\">Dự báo</MediumLabel>\n                <Forecast>{forecasts}</Forecast>\n            </ForecastWrapper>\n        </Results>\n    );\n};\n\nResult.propTypes = {\n    weather: PropTypes.shape({\n        city: PropTypes.string,\n        country: PropTypes.string,\n        date: PropTypes.string,\n        description: PropTypes.string,\n        main: PropTypes.string,\n        temp: PropTypes.number,\n        sunrise: PropTypes.string,\n        sunset: PropTypes.string,\n        humidity: PropTypes.number,\n        wind: PropTypes.number,\n        highestTemp: PropTypes.number,\n        lowestTemp: PropTypes.number,\n        forecast: PropTypes.array,\n    }).isRequired,\n};\n\nexport default Result;\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faFrown } from '@fortawesome/free-solid-svg-icons';\nimport styled from 'styled-components';\nimport ResultFadeIn from './ResultFadeIn';\n\nconst NotFoundWrapper = styled.div`\n    max-width: 600px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    margin: 100px auto 0;\n    padding: 20px;\n    opacity: 0;\n    visibility: hidden;\n    position: relative;\n    border-radius: 10px;\n    top: 20px;\n    background-color: rgba(255, 255, 255, 0.3);\n    border-radius: 10px;\n    animation: ${ResultFadeIn} 0.5s 1.4s forwards;\n`;\n\nconst NotfoundIcon = styled.span`\n    display: block;\n    text-align: center;\n    color: #ffffff;\n    font-size: 40px;\n    margin-right: 10px;\n`;\n\nconst NotFoundText = styled.span`\n    color: #ffffff;\n    font-size: 17px;\n`;\n\nconst NotFound = () => {\n    return (\n        <NotFoundWrapper>\n            <NotfoundIcon>\n                <FontAwesomeIcon icon={faFrown} />\n            </NotfoundIcon>\n            <NotFoundText>Sorry, the specified city was not found..</NotFoundText>\n        </NotFoundWrapper>\n    );\n};\n\nexport default NotFound;\n","import React from 'react';\nimport styled from 'styled-components';\nimport SearchCity from './SearchCity';\nimport device from '../responsive/Device';\nimport Result from './Result';\nimport NotFound from './NotFound';\n\nconst AppTitle = styled.h1`\n    display: block;\n    height: 64px;\n    margin: 0;\n    padding: 20px 0;\n    font-size: 20px;\n    text-transform: uppercase;\n    font-weight: 400;\n    color: #ffffff;\n    transition: 0.3s 1.4s;\n    ${'' /* opacity: ${({ showLabel }) => (showLabel ? 1 : 0)}; */}\n\n    ${({ secondary }) =>\n        secondary &&\n        `\n    opacity: 1;\n    height: auto;\n    position: relative;\n    padding: 20px 0;\n    font-size: 30px;\n    top: 20%;\n    text-align: center;\n    transition: .5s;\n    @media ${device.tablet} {\n      font-size: 40px;\n    }\n    @media ${device.laptop} {\n      font-size: 50px;\n    }\n    @media ${device.laptopL} {\n      font-size: 60px;\n    }\n    @media ${device.desktop} {\n      font-size: 70px;\n    }\n    \n  `}\n\n    ${({ showResult }) =>\n        showResult &&\n        `\n    opacity: 0;\n    visibility: hidden;\n    top: 10%;\n  `}\n`;\n\nconst WeatherWrapper = styled.div`\n    max-width: 1500px;\n    margin: 0 auto;\n    height: calc(100vh - 64px);\n    width: 100%;\n    position: relative;\n`;\n\nclass App extends React.Component {\n    state = {\n        value: '',\n        weatherInfo: null,\n        error: false,\n    };\n\n    handleInputChange = e => {\n        this.setState({\n            value: e.target.value,\n        });\n    };\n\n    handleSearchCity = e => {\n        e.preventDefault();\n        const { value } = this.state;\n        const APIkey = process.env.REACT_APP_API_KEY;\n\n        const weather = `https://api.openweathermap.org/data/2.5/weather?q=${value}&APPID=${APIkey}&units=metric`;\n        const forecast = `https://api.openweathermap.org/data/2.5/forecast?q=${value}&APPID=${APIkey}&units=metric`;\n\n        Promise.all([fetch(weather), fetch(forecast)])\n            .then(([res1, res2]) => {\n                if (res1.ok && res2.ok) {\n                    return Promise.all([res1.json(), res2.json()]);\n                }\n                throw Error(res1.statusText, res2.statusText);\n            })\n            .then(([data1, data2]) => {\n                const months = [\n                    'January',\n                    'February',\n                    'March',\n                    'April',\n                    'May',\n                    'June',\n                    'July',\n                    'August',\n                    'September',\n                    'October',\n                    'Nocvember',\n                    'December',\n                ];\n                const days = [\n                    'Sunday',\n                    'Monday',\n                    'Tuesday',\n                    'Wednesday',\n                    'Thursday',\n                    'Friday',\n                    'Saturday',\n                ];\n                const currentDate = new Date();\n                const date = `${days[currentDate.getDay()]} ${currentDate.getDate()} ${\n                    months[currentDate.getMonth()]\n                }`;\n                const sunset = new Date(data1.sys.sunset * 1000).toLocaleTimeString().slice(0, 5);\n                const sunrise = new Date(data1.sys.sunrise * 1000).toLocaleTimeString().slice(0, 5);\n\n                const weatherInfo = {\n                    city: data1.name,\n                    country: data1.sys.country,\n                    date,\n                    description: data1.weather[0].description,\n                    main: data1.weather[0].main,\n                    temp: data1.main.temp,\n                    highestTemp: data1.main.temp_max,\n                    lowestTemp: data1.main.temp_min,\n                    sunrise,\n                    sunset,\n                    clouds: data1.clouds.all,\n                    humidity: data1.main.humidity,\n                    wind: data1.wind.speed,\n                    forecast: data2.list,\n                };\n                this.setState({\n                    weatherInfo,\n                    error: false,\n                });\n            })\n            .catch(error => {\n                console.log(error);\n\n                this.setState({\n                    error: true,\n                    weatherInfo: null,\n                });\n            });\n    };\n\n    render() {\n        const { value, weatherInfo, error } = this.state;\n        return (\n            <>\n                <div\n                    style={{\n                        textAlign: 'right',\n                    }}\n                >\n                    <AppTitle>Made by : Le Tuan Thanh</AppTitle>\n                </div>\n                <WeatherWrapper>\n                    <AppTitle secondary showResult={(weatherInfo || error) && true}>\n                        Weather app\n                    </AppTitle>\n                    <SearchCity\n                        value={value}\n                        showResult={(weatherInfo || error) && true}\n                        change={this.handleInputChange}\n                        submit={this.handleSearchCity}\n                    />\n                    {weatherInfo && <Result weather={weatherInfo} />}\n                    {error && <NotFound error={error} />}\n                </WeatherWrapper>\n            </>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.sass';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('weather-app'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}